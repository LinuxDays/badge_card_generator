#!/usr/bin/env python3

import os
import fileinput
from itertools import zip_longest
import xml.etree.ElementTree as ET
import subprocess
import unicodedata
from collections import namedtuple

Record = namedtuple('Record', ['name'])
outdir = "./out/"


class SVGTemplate:
    """ Template SVG customizing some fields """

    def __init__(self, tpl, outdir="."):
        self.tpl = ET.parse(tpl)
        self.outdir = outdir

    def patch(self, record, modifier):
        """
        Patch SVG using modifier function.
        """
        for f, v in zip(record._fields, account):
                tag = self.tpl.find('.//*[@id="{}"]'.format(f))
                modifier(tag, v)

    def write(self, record, outfname=None):
        """
        Write patched SVG either to outfname if set, or to file name
        generated by fnamegen class property.
        Return outfname.
        """
        fname = outfname if outfname else self.fnamegen(record)
        with open(os.path.join(self.outdir, fname), 'wb') as outf:
            self.tpl.write(outf, encoding='utf-8', xml_declaration=True)
        return fname

    def template(self, record, modifier, outfname=None):
        """
        Template SVG using modifier function.
        Write it either to outfname if set, or to file name
        generated by fnamegen class property.
        Return outfname.
        """
        self.patch(record, modifier)
        return self.write(record, outfname)

    @staticmethod
    def textmodifier(tag, v):
            tag.text = v

    @staticmethod
    def xlinkmodifier(tag, v):
            tag.set('{http://www.w3.org/1999/xlink}href', v)

    def templatetext(self, record, outfname=None):
        """Template SVG text"""
        return self.template(record, self.textmodifier, outfname)

    def templatexlink(self, record, outfname=None):
        """Template SVG xlink"""
        return self.template(record, self.xlinkmodifier, outfname)

def reordercards(cards, rows=4, sheetrows=9, sheetcols=3, dummycard=None):
    """
    Reorder items in a way their ordering
    spans across `rows` rows of paper.

    [0:8]   [36:44] [72:80]  <- first sheet
    [9:17]  [45:53] [81:89]  <- second sheet
    [18:26] [54:62] [90:98]
    [27:35] [63:71] [99:107]
    """
    module = rows * sheetrows * sheetcols
    cardsets = zip_longest(*[iter(cards)] * module, fillvalue=dummycard)
    for s in cardsets:
        for row in range(rows):
            rowoffset = row * sheetrows
            for sheetcol in range(sheetcols):
                coloffset = sheetcol * sheetrows * rows
                for sheetrow in range(sheetrows):
                    yield s[rowoffset + coloffset + sheetrow]

def gensheets(cards, template, dummycard="", ncards=27):
    """
    Put ncards cards on a sheet. Fill the rest of sheet with dummy cards.
    Align cards into column, considering rows of subsequent sheets
    """
    layout = SVGTemplate(template, outdir)
    Sheet = namedtuple('Sheet', ['pos{}'.format(x) for x in range(ncards)])
    sheets = []
    cardsets = zip_longest(*[iter(cards)] * ncards, fillvalue=dummycard)
    for i, cardset in enumerate(cardsets):
        fname = "sheet{:02d}.svg".format(i+1)
        sheet = Sheet(*[c + "#layer1" for c in cardset])
        layout.templatexlink(sheet, fname)
        sheets.append(fname)
    return sheets


def pdfsheets(sheets):
    """Convert sheets to PDF"""
    isscript = []
    for fname in sheets:
        isscript.append("{} -A={}pdf".format(fname, fname[:-3]))
    isscript.append("quit\n")
    isscript = "\n".join(isscript).encode("utf-8")
    os.chdir(outdir)
    subprocess.check_output(['inkscape', '--shell'], input=isscript)


def cardnamegen(record):
    slug = unicodedata.normalize('NFKD', record.name)
    slug = slug.encode('ascii', 'ignore').decode('ascii').lower()
    slug = re.sub(r'[^a-z0-9]+', '-', slug).strip('-')
    slug = re.sub(r'[-]+', '-', slug)
    return "card-{}.svg".format(slug)

def main():
    cardtpl = SVGTemplate('linuxdays-badge.svg', outdir)
    cardtpl.fnamegen = cardnamegen
    cards = []

    print("Templating cards…")
    for line in fileinput.input():
        name = line.rstrip()
        rec = Record(name)
        fname = cardtpl.templatetext(rec)
        cards.append(fname)
    cards = reordercards(card, dummycard='../linuxdays-badge-dummy.svg')

    print("Creating layouts…")
    sheets = gensheets(cards, 'avery-L4784-cards.svg')
    print("Converting to pdf…")
    pdfsheets(sheets)


if __name__ == "__main__":
    main()
