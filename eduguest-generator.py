#!/usr/bin/env python3

import os
import fileinput
from itertools import zip_longest
import xml.etree.ElementTree as ET
import subprocess
from collections import namedtuple

Account = namedtuple('Account', ['gn', 'sn', 'uid', 'password', 'validity'])
outdir = "./out/"


class SVGTemplate:
    """ Template SVG customizing some fields """

    def __init__(self, tpl, outdir="."):
        self.tpl = ET.parse(tpl)
        self.outdir = outdir

    def set_fnamegen(self, fnamegen):
        """Set filename generator function."""
        self.fg = fnamegen

    def template(self, account, modifier, outfname=None):
        """
        Template SVG using modifier function.
        Write it either to outfname if set, or to file name
        generated by fnamegen property.
        Return outfname.
        """
        for f, v in zip(account._fields, account):
                tag = self.tpl.find('.//*[@id="{}"]'.format(f))
                modifier(tag, v)
        fname = outfname if outfname else self.fg(account)
        with open(os.path.join(self.outdir, fname), 'wb') as outf:
            self.tpl.write(outf, encoding='utf-8', xml_declaration=True)
        return fname

    def templatetext(self, account, outfname=None):
        """Template SVG text"""
        def m(tag, v):
            tag.text = v
        return self.template(account, m, outfname)

    def templatexlink(self, account, outfname=None):
        """Template SVG xlink"""
        def m(tag, v):
            tag.set('{http://www.w3.org/1999/xlink}href', v)
        return self.template(account, m, outfname)


def gensheets(cards, template, dummycard):
    """Put 10 cards a on sheet. Fill the rest of sheet with dummy cards."""
    layout = SVGTemplate(template, outdir)
    Sheet = namedtuple('Sheet', ['pos{}'.format(x) for x in range(10)])
    sheets = []
    cardsets = zip_longest(*[iter(cards)] * 10, fillvalue=dummycard)
    for i, cards in enumerate(cardsets):
        fname = "sheet{:02d}.svg".format(i+1)
        sheet = Sheet(*[c + "#layer1" for c in cards])
        layout.templatexlink(sheet, fname)
        sheets.append(fname)
    return sheets


def pdfsheets(sheets):
    """Convert sheets to PDF"""
    isscript = []
    for fname in sheets:
        isscript.append("{} -A={}pdf".format(fname, fname[:-3]))
    isscript.append("quit\n")
    isscript = "\n".join(isscript).encode("utf-8")
    os.chdir(outdir)
    subprocess.check_output(['inkscape', '--shell'], input=isscript)


def main():
    cardtpl = SVGTemplate('eduguest-card-template.svg', outdir)
    cardtpl.set_fnamegen(lambda act: "card-{}.svg".format(act.uid))
    cards = []

    validto = "2017-06-07 00:00 UTC"
    print("Templating cards…")
    delim = "; "
    for line in fileinput.input():
        if delim not in line:
            continue
        sn, gn, _, uid, password, *_ = line.rstrip().split(delim)
        act = Account(gn, sn, uid, password, validto)
        fname = cardtpl.templatetext(act)
        cards.append(fname)

    print("Creating layouts…")
    sheets = gensheets(cards, 'avery-L4727-cards.svg',
                       '../eduguest-card-dummy.svg')
    print("Converting to pdf…")
    pdfsheets(sheets)


if __name__ == "__main__":
    main()
